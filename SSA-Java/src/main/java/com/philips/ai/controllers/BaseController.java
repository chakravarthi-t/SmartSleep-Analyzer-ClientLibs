/*
 * smartsleep-analyzer
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.philips.ai.controllers;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;

import com.philips.ai.Configuration;
import com.philips.ai.exceptions.*;
import com.philips.ai.http.client.HttpCallBack;
import com.philips.ai.http.client.HttpClient;
import com.philips.ai.http.client.HttpContext;
import com.philips.ai.http.client.OkClient;
import com.philips.ai.http.response.HttpResponse;
import com.philips.ai.http.response.HttpStringResponse;

public abstract class BaseController {
	/**
	 * Private variable to keep shared reference of client instance
	 */
	private static HttpClient clientInstance = null;
	private static final Object syncObject = new Object();

	public AccessController getAccess() {
		return AccessController.getInstance();
	}

	/**
	 * Protected variable to keep reference of httpCallBack instance if caller
	 * provides any
	 */
	protected HttpCallBack httpCallBack = null;

	/**
	 * Get httpCallBack associated with this controller
	 * 
	 * @return HttpCallBack
	 */
	protected HttpCallBack getHttpCallBack() {
		return httpCallBack;
	}

	/**
	 * Set the httpCallBack for this controller
	 * 
	 * @param httpCallBack
	 */
	protected void setHttpCallBack(HttpCallBack httpCallBack) {
		this.httpCallBack = httpCallBack;
	}

	/**
	 * Shared instance of the HTTP client
	 * 
	 * @return The shared instance of the HTTP client
	 */
	public static HttpClient getClientInstance() {
		if (null == clientInstance) {
			synchronized (syncObject) {
				if (null == clientInstance) {
					clientInstance = OkClient.getSharedInstance();
				}
			}
		}
		return clientInstance;
	}

	/**
	 * Shared instance of the HTTP client
	 * 
	 * @param client The shared instance of the HTTP client
	 */
	public static void setClientInstance(HttpClient client) {
		if (null != client) {
			synchronized (syncObject) {
				if (null != client) {
					clientInstance = client;
				}
			}
		}
	}

	/**
	 * Validates the response against HTTP errors defined at the API level
	 * 
	 * @param _response The response received
	 * @param context   Context of the request and the received response
	 * @throws UnirestException
	 */
	protected void validateResponse(HttpResponse _response, HttpContext context) throws APIException {
		// get response status code to validate
		int responseCode = _response.getStatusCode();
		if ((responseCode < 200) || (responseCode > 208)) { // [200,208] = HTTP OK
			String _responseBody = ((HttpStringResponse) _response).getBody();
			if (!StringUtils.isEmpty(_responseBody)) {
				JSONObject responseJson = new JSONObject(_responseBody);
				if (responseJson.has("faultCode")) {
					String faultCode = responseJson.getString("faultCode");
					String message = responseJson.getString("message");
					throw new APIException(faultCode + ":" + message);

				} else if (_responseBody.contains("Access token expired")) {
					getAccess().getAccessToken(Configuration.clientId, Configuration.clientSecret);
					throw new APIException("Access token regenarated");
				}

				else {
					throw new APIException(_responseBody);
				}
			} else {
				throw new APIException("00000:Please verify the provided information is correct.");

			}

		}
	}
}
